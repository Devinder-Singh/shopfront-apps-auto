from time import time
from robot.api.deco import not_keyword

from listeners.data.constants import stats_mapping

from BaseTestFramework.utilities.graphite_utils import default_graphite


# This attribute ensures we run on version 2
# currently 2, 3 but 3 for when you want to do 
# modifications to the tests run (mutation tests? :grin:)
ROBOT_LISTENER_API_VERSION = 2
# this is the scope of this object, can set to TEST, SUITE, GLOBAL
# for GLOBAL, only one instance will be created
ROBOT_LIBRARY_SCOPE = 'GLOBAL'


@not_keyword
def end_test(name, attrs):
    """This is a built-in Robot Listener method. This is called 
        when a test case ends. In our case we use it to send 
        metrics to graphite after every test case execution. 
        The status of the test case is appended 
        to the metric being sent. In order to associate a metric 
        to a test case, you will have to add a "test-case to metric"
        mapping in the "constants.py" file under the "data" directory

        
            Args:
            
            name: (str) - The name of the test case

            attr: (dict) - This is the dictionary 
            containing details about tests execution
    """
    application = 'robotframework'

    # we need this mapping in order to align a metric with a TC
    # mapping structure:
    # <test-case-name>: <metric-path>
    metric_name = stats_mapping[name]
    metric_path = f"{application}.{metric_name}"

    # status from attr object generated by RF
    # contains details of events
    status = attrs['status']

    # append status to metric
    # full metric path structure:
    # <metric-path>.<status>
    metric_path = f"{metric_path}.{status.lower()}"

    # set metric value to 1.0, 
    # will send 1 test result at a time
    metric = [(metric_path, 1.0, time())]
    # send metric
    default_graphite.build_metric(metric).send()
